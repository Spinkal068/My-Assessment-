1. Aggregation Functions
SUM(): Adds all the numbers in a column.
AVERAGE(): Calculates the arithmetic mean of a column.
COUNT(): Counts the number of rows in a column.
COUNTROWS(): Counts the number of rows in a table.
MAX(): Returns the largest value in a column.
MIN(): Returns the smallest value in a column.
DISTINCTCOUNT(): Counts the number of distinct values in a column.
2. Logical Functions
IF(): Returns one value if a condition is true and another if false.
AND(): Checks if all conditions are true.
OR(): Checks if any condition is true.
NOT(): Reverses the value of a logical argument.
3. Date & Time Functions
TODAY(): Returns the current date.
NOW(): Returns the current date and time.
DATE(): Creates a date from year, month, and day.
YEAR(), MONTH(), DAY(): Extracts the respective component from a date.
DATEDIFF(): Calculates the difference between two dates.
EOMONTH(): Returns the end of the month for a specified date.
WEEKDAY(): Returns the day of the week for a date.
FORMAT(): Formats a value as a string (useful for dates).
4. Text Functions
CONCATENATE() or CONCAT(): Combines two strings into one.
LEFT(): Extracts a specified number of characters from the start of a string.
RIGHT(): Extracts a specified number of characters from the end of a string.
MID(): Returns a substring from the middle of a string.
SEARCH(): Finds the position of a substring within a string.
LEN(): Returns the number of characters in a string.
TRIM(): Removes all spaces from a text string except for single spaces between words.
5. Filter Functions
FILTER(): Returns a table that represents a subset of another table.
ALL(): Ignores all filters applied to a column or table.
CALCULATE(): Evaluates an expression in a modified filter context.
KEEPFILTERS(): Applies additional filters while keeping existing ones.
REMOVEFILTERS(): Removes filters applied to columns or tables.
6. Time Intelligence Functions
DATESYTD(): Returns a table containing the year-to-date dates.
DATESMTD(): Returns a table containing the month-to-date dates.
DATESQTD(): Returns a table containing the quarter-to-date dates.
PREVIOUSMONTH(): Returns a table of dates from the previous month.
NEXTMONTH(): Returns a table of dates for the next month.
SAMEPERIODLASTYEAR(): Returns the same period in the previous year.
TOTALYTD(): Calculates year-to-date values.
7. Ranking and Hierarchy
RANKX(): Returns the ranking of a value in a table or column.
PATH(): Returns a delimited string that represents a path from one node to another in a parent-child hierarchy.
8. Statistical Functions
MEDIAN(): Returns the median of a column.
PERCENTILE.EXC() / PERCENTILE.INC(): Calculates a percentile.
STDEV.P() / STDEV.S(): Calculates standard deviation for an entire population or sample.
9. Table Manipulation Functions
UNION(): Combines two or more tables into a single table.
INTERSECT(): Returns the intersection of two tables.
EXCEPT(): Returns the rows in the first table that do not appear in the second.
ADDCOLUMNS(): Adds calculated columns to a table.
SUMMARIZE(): Creates a summary table for the requested totals over a set of groups.
10. Math & Statistical Functions
DIVIDE(): Safely divides two numbers, returning alternate results for division by zero.
ROUND(): Rounds a number to a specified number of digits.
CEILING(): Rounds a number up to the nearest integer or multiple.
FLOOR(): Rounds a number down to the nearest integer or multiple.
11. Other Commonly Used Functions
RELATED(): Fetches a value from a related table.
LOOKUPVALUE(): Returns a single value based on a search condition.
SWITCH(): Evaluates multiple expressions and returns the first one that is true.
ISBLANK(): Checks if a value is blank.
BLANK(): Returns a blank value.



------------------------------------------------------------------------------------------------------------------
Aggregation Function----

1. SUM--

   SUM ( table[column] )
   SUMX (table,table[column])

Adds all the numbers in a column.

exp---
     Total Sales = SUM(Sales[SalesAmount])

2. SUMX---

SUMX(<table>, <expression>)

Returns the sum of an expression evaluated for each row in a table

Total Revenue = SUMX(Sales, Sales[Quantity] * Sales[UnitPrice])
Filtered Revenue = SUMX(FILTER(Sales, Sales[Quantity] > 10),Sales[Quantity] * Sales[UnitPrice])

3. Average-----
 
AVERAGE ( table[column] )
AVERAGEX (table,table[column])

Returns the average (arithmetic mean) of all the numbers in a column.
Average Sales = AVERAGE(Sales[SalesAmount])

4. Max-----

MAX ( table[column] )
MAXX (table,table[column])

Returns the largest value in a column, or the larger value between two scalar expressions. Ignores logical values. Strings are compared according to alphabetical order.

5. Min----

MIN ( table[column] )
MINX (table,table[column])

Returns the smallest value in a column, or the smaller value between two scalar expressions. Ignores logical values. Strings are compared according to alphabetical order.

Minimum Sales = MIN(Sales[SalesAmount])

6. Count----

COUNT ( table[column] )
COUNTX (table,table[column])

Counts non-blank numeric values in a column.

Total Count = COUNT(Sales[SalesAmount])


7. CountA -----

COUNTA ( table[column] )
COUNTAX (table,table[column])

Counts non-blank values (numeric, text, or logical) in a column.

Count All = COUNTA(Sales[SalesAmount])

8. CountX-------

COUNTAX ( <Table>, <Expression> )

Counts the rows in a table based on a logical expression.
Count Sales > 100 = COUNTX(Sales,IF(Sales[SalesAmount] > 100, 1, BLANK()))

9. DISTINCTCOUNT-----

DISTINCTCOUNT ( table[column] )

Counts the distinct (unique) values in a column.

Distinct Sales Count = DISTINCTCOUNT(Sales[SalesAmount])

10. COUNTROWS-----

COUNTROWS ( table )
COUNTROWS ( DISTINCT ( table ) )
COUNTROWS ( VALUES ( table ) )

Counts the total number of rows in a table

Row Count = COUNTROWS(Sales).

11. Countblank---

COUNTBLANK(<column>)

If no rows are found that meet the blank condition, the function returns blank.

Blank Count = COUNTBLANK(Sales[SalesAmount]).

Logical Function---------------

12. If ---

IF ( <LogicalTest>, <ResultIfTrue> )

Checks whether a condition is met, and returns one value if TRUE, and another value if FALSE.

Price Category = IF(Sales[Price] > 100, "Expensive", "Affordable")
Price Category = IF(Sales[Price] < 50, "Low", IF(Sales[Price] <= 100, "Medium", "High"))

13. AND-----

AND(logical1, logical2)


Checks whether all arguments are TRUE, and returns TRUE if all arguments are TRUE.

The AND function accepts only two arguments. Consider using the operator && to avoid multiple nested calls in case there are three or more conditions to evaluate in a logical AND.

High Sales Measure = IF(SUM(Sales[Revenue]) > 5000 && SUM(Sales[Quantity]) > 200, "Yes", "No").

14. OR-----

OR(condition1, condition2),

Returns TRUE if any of the arguments are TRUE, and returns FALSE if all arguments are FALSE.

IsPopular = Sales[Units Sold] > 500 || Sales[Revenue] > 10000

Discount Eligibility = IF(OR(Sales[Category] = "A", Sales[Units Sold] > 500), "Eligible", "Not Eligible")

15. Not()----

NOT(logical)

Changes FALSE to TRUE, or TRUE to FALSE.
A logical expression that evaluates to TRUE or FALSE.

Not Expensive = NOT(Sales[Price] > 100)
Price Category = IF(NOT(Sales[Price] > 100), "Low or Medium", "High")

 Date & Time Functions-----------

16. TODAY(): --------

TODAY()

Returns the current date in datetime format.
Today's Sales = CALCULATE(SUM('Sales'[Amount]),'Sales'[Order Date] = TODAY())

17. Now():--------------

NOW()

Return Current date and time.
Days Since Start = DATEDIFF(DATE(2024, 1, 1), NOW(), DAY)
Current Month Sales = 
CALCULATE(SUM(Sales[Amount]),MONTH(Sales[Date]) = MONTH(NOW()) &&
YEAR(Sales[Date]) = YEAR(NOW()))

18. Date()--------

DATE(year, month, day)

Returns the specified date in datetime format.
DATE(2024, 12, 27)

19. Year()--------

YEAR(<date>)

Returns the year of a date as a four digit integer.
OrderYear = YEAR(Sales[OrderDate])

20. DATEDIFF()-------

DATEDIFF(<Start_Date>, <End_Date>, <Interval>)


The DATEDIFF() function in DAX is used in Power BI to calculate the difference between two dates in a specified unit of time. It returns an integer value representing the difference.

Delivery Days = DATEDIFF(Sales[Order Date], Sales[Delivery Date], DAY)

21. EOMONTH()------

EOMONTH(start_date, months)

The EOMONTH() function in Power BI (DAX) is used to return the last day of the month that is a specified number of months before or after a given date.

EndOfMonth = EOMONTH(Sales[Order Date], 0)
FutureEndOfMonth = EOMONTH(Sales[Order Date], 3)

22. WEEKDAY()------

WEEKDAY(<date>, <return_type>)

Returns a number identifying the day of the week of a date. The number is in a range 1-7 or 0-6 according to the choice of the ReturnType parameter.

DayOfWeek_Custom = WEEKDAY('Sales'[OrderDate], 2)

23. FORMAT()---------

FORMAT(value, format_string[, locale_name])

used to format values as text according to a specified format string. It is especially useful when you need to present numbers, dates, or other values in a specific format within your Power BI reports.

Converts a value to text in the specified number format.

FormattedValue = FORMAT(1234.56, "#,##0.00")
FormattedDate = FORMAT(TODAY(), "dd-mm-yyyy")
FormattedPercentage = FORMAT(0.853, "0.00%")


Text Functions-------

24. CONCATENATE() or CONCAT():

CONCATENATE(<text1>, <text2>)

Joins two text strings into one text string.

FullName = CONCATENATE(Orders[FirstName], Orders[LastName])
ConcatenatedProducts = CONCAT(Products[ProductNames])

FullName = Orders[FirstName] & " " & Orders[LastName]

25. LEFT():------
LEFT(<text>, <num_chars>)

Returns the specified number of characters from the start of a text string.
DepartmentCode = LEFT('Table'[EmployeeID], 3)

26. RIGHT():-------

RIGHT(<text>, <num_chars>)

Returns the specified number of characters from the end of a text string.

ExtractedCode = RIGHT(Products[ProductCode], 5)
CustomCode = CONCATENATE("Code-", RIGHT(Products[ProductCode], 5))

27. MID():----

MID(<text>, <start_position>, <num_chars>)

Returns a string of characters from the middle of a text string, given a starting position and length.
ExtractedText = MID(Employees[FullName], 1, 4)


28. SEARCH():--------

SEARCH(find_text, within_text, [start_position], [not_found_value])

Returns the starting position of one text string within another text string. SEARCH is not case-sensitive, but it is accent-sensitive.

ChairPosition = SEARCH("Chair", ProductName)
ChairPositionFrom5 = SEARCH("Chair", ProductName, 5)
ChairPositionSafe = SEARCH("Chair", ProductName, 1, -1)

29. LEN()---------

LEN(<text>)

Returns the number of characters in a text string.

NameLength = LEN(Customers[CustomerName])
IsLongName = IF(LEN(Customers[CustomerName]) > 5, "Yes", "No")


30. TRIM():------

TRIM(<text>)

Removes all spaces from a text string except for single spaces between words

TrimmedName = TRIM(TableName[FullName])

Filter Functions---------------

31. FILTER()------

FILTER(<table>, <filter_expression>)

Returns a table that has been filtered.

The FILTER function returns a table that meets a condition. It is often used in combination with other functions like CALCULATE.

FilteredTable = FILTER(Sales, Sales[Amount] > 1000)

32. ALL():--------------

ALL([<table>] | <column>[, <column>[, ...]])

The ALL() function in DAX (Data Analysis Expressions) is used to remove filters from a table or column. 
It returns all the rows in a table or all the values in a column, ignoring any applied filters.

Total Sales Without Any Filters = CALCULATE(SUM(Sales[Amount]), ALL(Sales))
Percentage of Total Sales = DIVIDE(SUM(Sales[Amount]),CALCULATE(SUM(Sales[Amount]), ALL(Sales)))

33. CALCULATE():---------
CALCULATE(<expression>, [<filter1>], [<filter2>], ...)

Evaluates an expression in a context modified by filters.
CALCULATE function evaluates an expression in a modified filter context. It allows you to 
change the context under which calculations are performed by applying filters or modifying existing ones.

TotalSales2023 = CALCULATE(SUM(Sales[Sales Amount]), YEAR(Sales[Date]) = 2023)
TotalSalesFiltered = CALCULATE(SUM(Sales[Sales Amount]),YEAR(Sales[Date]) = 2023,Sales[Sales Amount] > 600)
TotalSalesAll = CALCULATE(SUM(Sales[Sales Amount]), ALL(Sales))

34. KEEPFILTERS()----------

KEEPFILTERS(<expression>)

Changes the CALCULATE and CALCULATETABLE function filtering semantics.
The KEEPFILTERS() function in DAX is used to preserve the existing filter context in a calculation, even when other filters are applied. Normally, DAX calculations ignore certain filters when using functions like CALCULATE. However, KEEPFILTERS() ensures that the original filter remains applied alongside any new ones.

Sales_North = CALCULATE(SUM(Sales[SalesAmount]),Sales[Region] = "North")
Sales_North_KeepFilters = CALCULATE(SUM(Sales[SalesAmount]),KEEPFILTERS(Sales[Region] = "North"))

35. REMOVEFILTERS():--------------

REMOVEFILTERS(<table|column>)

The REMOVEFILTERS() function in DAX is used to remove filters from a table or column. 
It clears any filter context that may have been applied, ensuring that the data returned by the expression is not influenced by those filters.
Total Sales (No Product Filter) = CALCULATE(SUM(Sales[Revenue]),REMOVEFILTERS(Product))
Total Sales (All Filters Removed) = CALCULATE(SUM(Sales[Revenue]),REMOVEFILTERS())

Time Intelligence Functions-----------------

36. DATESYTD():---------------------

DATESYTD(<dates>, [year_end_date])

Returns a set of dates in the year up to the last date visible in the filter context.

DATESYTD() is a DAX time intelligence function that returns a set of dates from the beginning of the year-to-date (YTD) period, based on the specified column containing dates.

TotalSales_YTD = CALCULATE(SUM(Sales[Amount]),DATESYTD(Sales[Date]))

37. DATESMTD():-------------------

DATESMTD(<dates>)


Returns a set of dates in the month up to the last date visible in the filter context.

The DATESMTD function in DAX returns a table containing a column of dates for the month-to-date (MTD) period, starting from the beginning of the month up to the current date in the given context.

MTD_Sales = CALCULATE(SUM(Sales[SalesAmount]), DATESMTD(Sales[Date]))


38. DATESQTD():------------------

DATESQTD(<dates>)

Returns a set of dates in the quarter up to the last date visible in the filter context.

The DATESQTD function in DAX returns a single-column table of dates for the quarter to date in the current context. It helps calculate cumulative values from the start of the current quarter up to a given date.

Sales_QTD = CALCULATE(SUM(Sales[Amount]), DATESQTD(Sales[Date]))

39. PREVIOUSMONTH():-------------------

PREVIOUSMONTH(<dates>)

Returns a previous month.

The PREVIOUSMONTH() function in DAX returns a table that contains all the dates from the previous month, based on the given dates in a column.

Total Sales Previous Month = 
CALCULATE(
    SUM(Sales[SalesAmount]), 
    PREVIOUSMONTH(Sales[OrderDate])
)

40. NEXTMONTH():-------------

NEXTMONTH(<dates>)

Returns a next month.
The NEXTMONTH() function in DAX (Data Analysis Expressions) returns a table that contains all the dates in the next month, based on a given column containing dates.

NextMonthSales = 
CALCULATE(
    SUM('Sales'[SalesAmount]), 
    NEXTMONTH('Sales'[OrderDate])
)

41. SAMEPERIODLASTYEAR():---------------

SAMEPERIODLASTYEAR(<dates>)

Returns a set of dates in the current selection from the previous year.
The SAMEPERIODLASTYEAR() function in DAX (Data Analysis Expressions) is used to return a set of dates from the same period in the previous year. It is typically used in time-based calculations such as year-over-year comparisons.

Sales_LastYear = 
CALCULATE(
    SUM(Sales[SalesAmount]),
    SAMEPERIODLASTYEAR('Date'[Date])
)

42. TOTALYTD():------------

TOTALYTD(<expression>, <dates>[, <filter>][, <year_end_date>])

Evaluates the specified expression over the interval which begins on the first day of the year and ends with the last date in the specified date column after applying specified filters.
The TOTALYTD function in DAX (Data Analysis Expressions) is used to calculate the year-to-date (YTD) total for a given measure or column, based on a specified date column.

TotalSalesYTD = TOTALYTD(SUM(Sales[Amount]), Sales[Date])

Ranking and Hierarchy Function ----------------------------------------------------------

43. RANKX():------------

RANKX( <table>,<expression>, [<value>], [<order>], [<ties>])


Returns the rank of an expression evaluated in the current context in the list of values for the expression evaluated for each row in the specified table.
The RANKX() function in DAX is used to return the rank of a value in a column based on a specified expression, within the context of a table. It assigns ranks to rows based on the evaluated expression, where the highest value gets the highest rank.

SalesRank = 
RANKX(
    ALL(Employees),  -- The table
    Employees[TotalSales]  -- The column to rank
)

44. PATH():---------------

PATH(ChildColumn, ParentColumn)


Returns a string which contains a delimited list of IDs, starting with the top/root of a hierarchy and ending with the specified ID.
The PATH() function in DAX is used to return a delimited text string that represents the hierarchical path of an ID column in a parent-child hierarchy. It is commonly used in organizational hierarchies, such as employee-manager relationships.

EmployeePath = PATH(Employee[EmployeeID], Employee[ManagerID])


Statistical Functions --------------------------------------------------------------------


45. MEDIAN()

MEDIAN(<column>)

Returns the 50th percentile of values in a column.
The MEDIAN() function in DAX returns the median (middle) value from a column or an expression. The median is the value that separates the higher half from the lower half of a dataset.

MedianSales = MEDIAN(SalesData[SalesAmount])

46. PERCENTILE.EXC() / PERCENTILE.INC():------------------

PERCENTILE.EXC(<column>, <k>)
PERCENTILE.INC(<column>, <k>)


PERCENTILE.EXC(): Returns the exclusive percentile of a dataset, meaning it excludes the first and last values and only considers percentiles between (1/(N+1)) and (N/(N+1)). It is useful when you want to calculate percentiles using interpolation.
PERCENTILE.INC(): Returns the inclusive percentile, meaning it includes the first and last values and considers percentiles between 0 and 1. It is the standard percentile calculation.

PERCENTILE_EXC_90 = PERCENTILE.EXC(Orders[Sales], 0.90)
PERCENTILE_INC_90 = PERCENTILE.INC(Orders[Sales], 0.90)

47. STDEV.P() / STDEV.S():------------------

STDEV.P(<column>)
The STDEV.P function calculates the standard deviation based on the entire population (P stands for Population). It assumes that the dataset contains all possible values of the population.
PopulationStdDev = STDEV.P(SalesData[SalesAmount])


STDEV.S(<column>)
The STDEV.S function calculates the standard deviation based on a sample (S stands for Sample). It is used when the dataset represents only a subset of the entire population.
SampleStdDev = STDEV.S(SalesData[SalesAmount])



 Table Manipulation Functions--------------------------------------

48. UNION():---------

UNION(<Table1>, <Table2>[, <Table3>, ...])

Returns the union of the tables whose columns match.
The UNION() function in DAX is used to combine two or more tables by appending their rows. The resulting table contains all the rows from the input tables, but it does not remove duplicate rows unless explicitly handled with DISTINCT().

Sales_Union = UNION(Sales2023, Sales2024)
Sales_Union_Distinct = DISTINCT(UNION(Table1, Table2))



49. INTERSECT():---------------------

INTERSECT(<Table1>, <Table2>)

Returns the rows of left-side table which appear in right-side table.
The INTERSECT() function in DAX returns only the common rows that exist in both tables. It works like the SQL INTERSECT operation and only includes rows that appear in both tables exactly as they are.

Common_Sales = INTERSECT(Sales2023, Sales2024)
INTERSECT(Table1, Table2)  -- ❌ Error! Column mismatch
The number and order of columns must match for INTERSECT() to work.

50.EXCEPT():-----------------

EXCEPT(<Table1>, <Table2>)


 The EXCEPT() function in DAX returns the rows that are in the first table but not in the second table. It is similar to the SQL EXCEPT or MINUS operation.
Sales_Only_2023 = EXCEPT(Sales2023, Sales2024)
EXCEPT(Table1, Table2)  -- ❌ Error! Column mismatch
The number and order of columns must match for EXCEPT() to work.

51. ADDCOLUMNS():------------

ADDCOLUMNS(<Table>, <ColumnName>, <Expression>[, <ColumnName>, <Expression>, ...])

The ADDCOLUMNS() function in DAX adds calculated columns to a table. It allows you to create new columns dynamically by defining expressions based on existing columns.

Sales_With_Total = ADDCOLUMNS(
    Sales,
    "Total Revenue", [Sales] * [Quantity]
)

52. SUMMARIZE():--------------

SUMMARIZE(<Table>, <GroupByColumn1>, <GroupByColumn2>, ..., [<ColumnName>, <Expression>])

The SUMMARIZE() function is used to create a grouped summary table based on specified columns, optionally adding calculated columns. It is similar to GROUP BY in SQL.

GroupedSales = SUMMARIZE(Sales, Sales[Product], Sales[Region])

 Math & Statistical Functions----------------------------------------------------------

53. DIVIDE():--------

DIVIDE(<Numerator>, <Denominator>[, <AlternateResult>])

The DIVIDE() function in DAX is used to safely divide two numbers while handling division by zero errors. Instead of returning an error when dividing by zero, DIVIDE() returns a specified alternative result (or BLANK() by default).

Sales_Per_Unit = DIVIDE(Sales[Total Sales], Sales[Units Sold])

54. CEILING():---------

CEILING(<Number>, <Significance>)

The CEILING() function in DAX rounds a number up to the nearest multiple of a specified significance.
RoundedValue = CEILING(23, 5)
RoundedValue = CEILING(12.3, 0.5)
Result: 12.5

12.3 is rounded up to the nearest multiple of 0.5

55.FLOOR():--------

FLOOR(<Number>, <Significance>)

The FLOOR() function in DAX rounds a number down to the nearest multiple of a specified significance. It always rounds towards zero.

FLOOR(17, 5)
FLOOR(18.7, 0.5)
Result: 18.5

18.7 is rounded down to the nearest multiple of 0.5.


Other Commonly Used Functions-----------------------------------------------


56. RELATED():-------

RELATED(<ColumnName>)

The RELATED() function in DAX is used to fetch a value from a related table in a one-to-many (or many-to-one) relationship. It works like a VLOOKUP in Excel, allowing you to bring data from a related table into the current table.
CategoryColumn = RELATED(Products[Category])

57. LOOKUPVALUE():-------------

LOOKUPVALUE(<Result_Column>, <Search_Column1>, <Search_Value1>[, <Search_Column2>, <Search_Value2>, ...])

The LOOKUPVALUE() function in DAX is used to retrieve a single value from a column in a table based on one or more search criteria. It works like a VLOOKUP in Excel but is more powerful because it supports multiple conditions.
Employee_Dept = LOOKUPVALUE(Employee[Department], Employee[EmployeeID], 102)

58. SWITCH():---------

SWITCH(<Expression>, <Value1>, <Result1>, <Value2>, <Result2>, ..., [<Else>])

The SWITCH() function in DAX is used to evaluate an expression and return different values based on predefined conditions. It is similar to a CASE statement in SQL or an IF-ELSE structure in programming.
Category_Column = SWITCH(
    Sales[Product],
    "A", "Phones",
    "B", "Laptops",
    "C", "Tablets",
    "Unknown"
)

Performance_Rating = SWITCH(
    TRUE(),
    Sales[Sales] > 1000, "Excellent",
    Sales[Sales] > 800, "Good",
    Sales[Sales] > 500, "Average",
    "Poor"
)

59. ISBLANK():-------

ISBLANK(<value>)

The ISBLANK() function in DAX checks if a value is blank (empty or null) and returns TRUE if it is blank, otherwise, it returns FALSE.
Sales_Is_Blank = ISBLANK(Sales[Sales])

60. BLANK():-------

BLANK()

The BLANK() function in DAX returns a blank value, which is different from zero, an empty string (""), or NULL in SQL. It is used to handle missing or undefined data in calculations.

Sales_Adjusted = ADDCOLUMNS(
    Sales,
    "Adjusted Sales", IF(Sales[Sales] = 0, BLANK(), Sales[Sales])
)



Another Dax-----

61. SELECTEDVALUE():-----

SELECTEDVALUE(<Column>[, <AlternateResult>])

Returns the value of a column when a single value is selected; otherwise, returns a specified alternate result (or BLANK).

SelectedProduct = SELECTEDVALUE(Sales[Product], "Multiple Products Selected")

62. USERELATIONSHIP():------

CALCULATE(<Expression>, USERELATIONSHIP(<Column1>, <Column2>))

Forces DAX to use a specific inactive relationship between tables.
TotalSales_UsingOrderDate = CALCULATE(SUM(Orders[SalesAmount]), USERELATIONSHIP(Orders[OrderDate], Calendar[Date]))

63. VALUES():-----

VALUES(<Column>)

Returns a one-column table with unique values from a specified column.
SelectedProduct = IF(HASONEVALUE(Sales[Product]), VALUES(Sales[Product]), "Multiple Products")


64. DISTINCT():-----

DISTINCT(<Column>)

Returns a one-column table with unique values from a specified column.
DistinctCategories = DISTINCT(Products[Category])



65. TOPN():-----

TOPN(<N>, <Table>, <OrderBy_Expression>, [Order])

Returns the top N rows from a table based on an expression.
Top5Products = TOPN(5, Sales, Sales[SalesAmount], DESC)






